This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-30T00:47:47.700Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/_layout.tsx
app/(auth)/_layout.tsx
app/(auth)/sign-in.tsx
app/(auth)/sign-up.tsx
app/(tabs)/_layout.tsx
app/+not-found.tsx
app/home.tsx
lib/appwrite.js

================================================================
Repository Files
================================================================

================
File: app/_layout.tsx
================
// app/_layout.tsx
import { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { Stack } from 'expo-router';
import * as SplashScreen from 'expo-splash-screen';
import { StatusBar } from 'expo-status-bar';
import { useEffect } from 'react';
import 'react-native-reanimated';
import "../global.css";
import useUserStore from '../stores/userStore';

SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const { user, loading, initializeUser } = useUserStore();

  const [fontsLoaded, error] = useFonts({
    "Poppins-Black": require("../assets/fonts/Poppins-Black.ttf"),
    "Poppins-Bold": require("../assets/fonts/Poppins-Bold.ttf"),
    "Poppins-ExtraBold": require("../assets/fonts/Poppins-ExtraBold.ttf"),
    "Poppins-ExtraLight": require("../assets/fonts/Poppins-ExtraLight.ttf"),
    "Poppins-Light": require("../assets/fonts/Poppins-Light.ttf"),
    "Poppins-Medium": require("../assets/fonts/Poppins-Medium.ttf"),
    "Poppins-Regular": require("../assets/fonts/Poppins-Regular.ttf"),
    "Poppins-SemiBold": require("../assets/fonts/Poppins-SemiBold.ttf"),
    "Poppins-Thin": require("../assets/fonts/Poppins-Thin.ttf"),
  });

  useEffect(() => {
    if (error) throw error;

    if (fontsLoaded) {
      initializeUser();
    }
  }, [fontsLoaded, error]);

  useEffect(() => {
    if (!loading && fontsLoaded) {
      SplashScreen.hideAsync();
    }
  }, [loading, fontsLoaded]);

  if (!fontsLoaded || loading) {
    return null; // Keep splash screen visible while loading fonts and user data
  }

  return (
    <>
      <Stack>
        {user ? (
          <>
            <Stack.Screen name="home" options={{ headerShown: false }} />
            <Stack.Screen name="+not-found" />
          </>
        ) : (
          <>
            <Stack.Screen name="(auth)/sign-in" options={{ headerShown: false }} />
            <Stack.Screen name="(auth)/sign-up" options={{ headerShown: false }} />
            <Stack.Screen name="+not-found" />
          </>
        )}
      </Stack>
      <StatusBar style="auto" />
    </>
  );
}

================
File: app/(auth)/_layout.tsx
================
// app/(auth)/_layout.tsx
import React from 'react';
import { View, Text } from 'react-native';

const AuthLayout = ({ children }) => {
  return (
    <View className="flex-1 bg-white">
      {children}
    </View>
  );
};

export default AuthLayout;

================
File: app/(auth)/sign-in.tsx
================
// app/(auth)/sign-in.tsx
import React from 'react';
import { View, Text, TextInput, TouchableOpacity, Alert } from 'react-native';
import { Formik } from 'formik';
import * as Yup from 'yup';
import { signIn, getCurrentUser } from '../../lib/appwrite';
import useUserStore from '../../stores/userStore';
import { useRouter } from 'expo-router';

const SignInSchema = Yup.object().shape({
  email: Yup.string().email('Invalid email').required('Email is required'),
  password: Yup.string().required('Password is required'),
});

const SignIn = () => {
  const setUser = useUserStore((state: { setUser: any; }) => state.setUser);
  const router = useRouter();

  const handleSignIn = async (values: { email: any; password: any; }, actions: { setSubmitting: (arg0: boolean) => void; }) => {
    const { email, password } = values;
    try {
      await signIn(email, password);
      const currentUser = await getCurrentUser();
      setUser(currentUser);
      router.push('/home');
    } catch (error: any) {
      console.error(error);
      Alert.alert('Sign In Error', error.message || 'An error occurred during sign in.');
      actions.setSubmitting(false);
    }
  };

  return (
    <View className="flex-1 px-6 py-12 bg-white justify-center">
      <Text className="text-3xl font-bold text-center mb-6">Welcome Back!</Text>
      <Formik
        initialValues={{ email: '', password: '' }}
        validationSchema={SignInSchema}
        onSubmit={handleSignIn}
      >
        {({ handleChange, handleBlur, handleSubmit, values, errors, touched, isSubmitting }) => (
          <>
            <TextInput
              className="h-12 border border-gray-300 rounded-md px-4 mb-2"
              placeholder="Email"
              keyboardType="email-address"
              autoCapitalize="none"
              onChangeText={handleChange('email')}
              onBlur={handleBlur('email')}
              value={values.email}
            />
            {errors.email && touched.email ? (
              <Text className="text-red-500 mb-2">{typeof errors.email === 'string' ? errors.email : ''}</Text>
            ) : null}

            <TextInput
              className="h-12 border border-gray-300 rounded-md px-4 mb-4"
              placeholder="Password"
              secureTextEntry
              autoCapitalize="none"
              onChangeText={handleChange('password')}
              onBlur={handleBlur('password')}
              value={values.password}
            />
            {errors.password && touched.password ? (
              <Text className="text-red-500 mb-4">{typeof errors.password === 'string' ? errors.password : ''}</Text>
            ) : null}

            <TouchableOpacity
              className={`bg-blue-500 h-12 rounded-md justify-center items-center mb-4 ${isSubmitting ? 'opacity-50' : ''
                }`}
              onPress={(e) => handleSubmit(e as any)}
              disabled={isSubmitting}
            >
              <Text className="text-white text-lg font-semibold">
                {isSubmitting ? 'Signing In...' : 'Sign In'}
              </Text>
            </TouchableOpacity>

            <TouchableOpacity onPress={() => router.push('/(auth)/sign-up')}>
              <Text className="text-center text-gray-600">
                Don't have an account?{' '}
                <Text className="text-blue-500 font-semibold">Sign Up</Text>
              </Text>
            </TouchableOpacity>
          </>
        )}
      </Formik>
    </View>
  );
};

export default SignIn;

================
File: app/(auth)/sign-up.tsx
================
// app/(auth)/sign-up.tsx
import React from 'react';
import { View, Text, TextInput, TouchableOpacity, Alert } from 'react-native';
import { Formik } from 'formik';
import * as Yup from 'yup';
import { createUser } from '../../lib/appwrite';
import useUserStore from '../../stores/userStore';
import { useRouter } from 'expo-router';

const SignUpSchema = Yup.object().shape({
  username: Yup.string()
    .min(2, 'Too Short!')
    .max(50, 'Too Long!')
    .required('Username is required'),
  email: Yup.string().email('Invalid email').required('Email is required'),
  password: Yup.string()
    .min(6, 'Password must be at least 6 characters')
    .required('Password is required'),
});

const SignUp = () => {
  const setUser = useUserStore((state: { setUser: any; }) => state.setUser);
  const router = useRouter();

  const handleSignUp = async (values: { email: any; password: any; username: any; }, actions: { setSubmitting: (arg0: boolean) => void; }) => {
    const { email, password, username } = values;
    try {
      const newUser = await createUser(email, password, username);
      setUser(newUser);
      router.push('/home');
    } catch (error: any) {
      console.error(error);
      Alert.alert('Sign Up Error', error.message || 'An error occurred during sign up.');
      actions.setSubmitting(false);
    }
  };

  return (
    <View className="flex-1 px-6 py-12 bg-white justify-center">
      <Text className="text-3xl font-bold text-center mb-6">Create an Account</Text>
      <Formik
        initialValues={{ username: '', email: '', password: '' }}
        validationSchema={SignUpSchema}
        onSubmit={handleSignUp}
      >
        {({ handleChange, handleBlur, handleSubmit, values, errors, touched, isSubmitting }) => (
          <>
            <TextInput
              className="h-12 border border-gray-300 rounded-md px-4 mb-2"
              placeholder="Username"
              onChangeText={handleChange('username')}
              onBlur={handleBlur('username')}
              value={values.username}
            />
            {errors.username && touched.username ? (
              <Text className="text-red-500 mb-2">{typeof errors.username === 'string' ? errors.username : ''}</Text>
            ) : null}

            <TextInput
              className="h-12 border border-gray-300 rounded-md px-4 mb-2"
              placeholder="Email"
              keyboardType="email-address"
              autoCapitalize="none"
              onChangeText={handleChange('email')}
              onBlur={handleBlur('email')}
              value={values.email}
            />
            {errors.email && touched.email ? (
              <Text className="text-red-500 mb-2">{typeof errors.email === 'string' ? errors.email : ''}</Text>
            ) : null}

            <TextInput
              className="h-12 border border-gray-300 rounded-md px-4 mb-4"
              placeholder="Password"
              secureTextEntry
              autoCapitalize="none"
              onChangeText={handleChange('password')}
              onBlur={handleBlur('password')}
              value={values.password}
            />
            {errors.password && touched.password ? (
              <Text className="text-red-500 mb-4">{typeof errors.password === 'string' ? errors.password : ''}</Text>
            ) : null}

            <TouchableOpacity
              className={`bg-blue-500 h-12 rounded-md justify-center items-center mb-4 ${isSubmitting ? 'opacity-50' : ''
                }`}
              onPress={(e) => handleSubmit(e as any)}
              disabled={isSubmitting}
            >
              <Text className="text-white text-lg font-semibold">
                {isSubmitting ? 'Signing Up...' : 'Sign Up'}
              </Text>
            </TouchableOpacity>

            <TouchableOpacity onPress={() => router.push('/(auth)/sign-in')}>
              <Text className="text-center text-gray-600">
                Already have an account?{' '}
                <Text className="text-blue-500 font-semibold">Sign In</Text>
              </Text>
            </TouchableOpacity>
          </>
        )}
      </Formik>
    </View>
  );
};

export default SignUp;

================
File: app/(tabs)/_layout.tsx
================
import { View, Text } from 'react-native'
import React from 'react'

const TabsLayout = () => {
  return (
    <View>
      <Text>TabsLayout</Text>
    </View>
  )
}

export default TabsLayout

================
File: app/+not-found.tsx
================
import { Link, Stack } from 'expo-router';
import { StyleSheet, Text, View } from 'react-native';



export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <View style={styles.container}>
        <Text >This screen doesn't exist.</Text>
        <Link href="/" style={styles.link}>
          <Text >Go to home screen!</Text>
        </Link>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});

================
File: app/home.tsx
================
// app/home.tsx
import { View, Text, TouchableOpacity, Alert } from 'react-native';
import React from 'react';
import { StatusBar } from 'expo-status-bar';
import useUserStore from '../stores/userStore';
import { signOut } from '../lib/appwrite';
import { useRouter } from 'expo-router';

const Home = () => {
  const user = useUserStore((state) => state.user);
  const setUser = useUserStore((state) => state.setUser);
  const router = useRouter();

  const handleSignOut = async () => {
    try {
      await signOut();
      setUser(null);
      router.push('/(auth)/sign-in');
    } catch (error) {
      console.error(error);
      Alert.alert('Sign Out Error', error.message || 'An error occurred during sign out.');
    }
  };

  return (
    <View className="flex-1 items-center justify-center bg-white px-6 py-12">
      <Text className="text-4xl font-bold mb-6">Virtual Trainer</Text>
      <Text className="text-lg mb-8">Welcome, {user?.username || 'User'}!</Text>
      <TouchableOpacity
        className="bg-red-500 h-12 w-full rounded-md justify-center items-center mb-4"
        onPress={handleSignOut}
      >
        <Text className="text-white text-lg font-semibold">Sign Out</Text>
      </TouchableOpacity>
      {/* Add navigation to other parts of the app here */}
    </View>
  );
};

export default Home;

================
File: lib/appwrite.js
================
import { Client, Account, ID, Functions, Documents } from 'react-native-appwrite';


export const appwriteCofig = {
    endpoint: 'https://appwrite-excer.youssefsoftware.com/v1',
    project: '6748ef0c00248aade2d0',
    platform: 'com.youssef.virtual-trainer',
    databaseId: '6748f0a60028e62f07a5',
    userCollectionId: '6748f0e2000c72adb75c',
    storageID: '6748f2310011290fec69'
}


const client = new Client();
client
    .setEndpoint(appwriteCofig.endpoint)
    .setProject(appwriteCofig.project)
    .setPlatform(appwriteCofig.platform);


const account = new Account(client);
const functions = new Functions(client);


export async function createUser(email, password, username) {
    try {
        const newAccount = await account.create(
            ID.unique(),
            email,
            password,
            username
        );

        if (!newAccount) throw Error;

        const avatarUrl = avatars.getInitials(username);

        await signIn(email, password);

        const newUser = await databases.createDocument(
            appwriteConfig.databaseId,
            appwriteConfig.userCollectionId,
            ID.unique(),
            {
                accountId: newAccount.$id,
                email: email,
                username: username,
                avatar: avatarUrl,
            }
        );

        return newUser;
    } catch (error) {
        throw new Error(error);
    }
}

// Sign In
export async function signIn(email, password) {
    try {
        const session = await account.createEmailSession(email, password);

        return session;
    } catch (error) {
        throw new Error(error);
    }
}

// Get Account
export async function getAccount() {
    try {
        const currentAccount = await account.get();
        return currentAccount;
    } catch (error) {
        throw error;
    }
}

// Get Current User
export async function getCurrentUser() {
    try {
        const currentAccount = await getAccount();
        if (!currentAccount) throw Error;

        const currentUser = await databases.listDocuments(
            appwriteConfig.databaseId,
            appwriteConfig.userCollectionId,
            [Query.equal("accountId", currentAccount.$id)]
        );

        if (!currentUser) throw Error;

        return currentUser.documents[0];
    } catch (error) {
        console.log(error);
        return null;
    }
}

// Sign Out
export async function signOut() {
    try {
        const session = await account.deleteSession("current");

        return session;
    } catch (error) {
        throw new Error(error);
    }
}
